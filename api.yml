# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /users:
    post:
      summary: Register new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequest"
      responses:
        "200":
          description: User registration response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
        "400":
          description: Invalid params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
    get:
      summary: Get user data
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
    patch:
      summary: Update user data
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Update user response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "400":
          description: Invalid params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "409":
          description: Phone number has already exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
  /users/login:
    post:
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User login response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        "400":
          description: Invalid params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AddUserRequest:
      type: object
      required:
        - phone_number
        - full_name
        - password
      properties:
        phone_number:
          type: string
        full_name:
          type: string
        password:
          type: string
    AddUserResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        error:
          $ref: "#/components/schemas/ErrorResponse"
        validation:
          $ref: "#/components/schemas/ValidationResult"
    ValidationResult:
      type: object
      properties:
        full_name:
          type: string
        phone_number:
          type: string
        password:
          type: string
    GetUserResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        error:
          $ref: "#/components/schemas/ErrorResponse"
        data:
          $ref: "#/components/schemas/User"
    UpdateUserRequest:
      type: object
      properties:
        phone_number:
          type: string
        full_name:
          type: string
    UpdateUserResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        error:
          $ref: "#/components/schemas/ErrorResponse"
        user_id:
          type: integer
    UserLoginResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        error:
          $ref: "#/components/schemas/ErrorResponse"
        user_id:
          type: integer
        auth_token:
          type: string
    User:
      type: object
      required:
        - phone_number
        - full_name
      properties:
        phone_number:
          type: string
        full_name:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
